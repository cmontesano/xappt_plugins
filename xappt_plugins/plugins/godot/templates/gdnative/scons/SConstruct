#!/usr/bin/env python3
import fnmatch
import os
import platform

try:
    # noinspection PyUnresolvedReferences
    from scons.SCons.Defaults import DefaultEnvironment
    # noinspection PyUnresolvedReferences
    from scons.SCons.Script.SConscript import SConsEnvironment
    # noinspection PyUnresolvedReferences
    from scons.SCons.Environment import Environment
    from scons.SCons.Variables import *
    from scons.SCons.Environment import BuilderWrapper
    from scons.SCons.Script import ARGUMENTS
except ImportError:
    from SCons.Defaults import DefaultEnvironment
    from SCons.Script.SConscript import SConsEnvironment
    from SCons.Environment import Environment
    from SCons.Variables import *
    from SCons.Environment import BuilderWrapper
    from SCons.Script import ARGUMENTS


if sys.platform.startswith('linux'):
    HOST_PLATFORM = 'linux'
elif sys.platform == 'darwin':
    HOST_PLATFORM = 'osx'
elif sys.platform == 'win32' or sys.platform == 'msys':
    HOST_PLATFORM = 'windows'
else:
    raise SystemExit('Could not detect host platform')


def find_files(path, pattern="*"):
    for item in os.listdir(path):
        if fnmatch.fnmatch(item, pattern):
            yield os.path.join(path, item)


opts = Variables([], ARGUMENTS)

# Gets the standard flags CC, CCX, etc.
env = DefaultEnvironment()

# Define our options
opts.Add(EnumVariable('target', "Compilation target", 'debug', ['debug', 'release']))
opts.Add(EnumVariable('platform', "Compilation platform", '', ['windows', 'x11', 'linux', 'osx', 'android']))
opts.Add(BoolVariable('use_llvm', "Use the LLVM / Clang compiler", 'no'))
opts.Add(PathVariable('target_path', 'The path where the lib is installed.', 'godot-cpp/bin/'))
opts.Add(PathVariable('target_name', 'The library name.', 'lib{CLASS_NAME!l}', PathVariable.PathAccept))
opts.Add(EnumVariable('android_arch', 'Target Android architecture', 'armv7', ['armv7', 'arm64v8', 'x86', 'x86_64']))
opts.Add('android_api_level', 'Target Android API level',
         '18' if ARGUMENTS.get("android_arch", 'armv7') in ['armv7', 'x86'] else '21')
opts.Add(BoolVariable('use_mingw', 'Use the MinGW compiler instead of MSVC - only effective on Windows', False))
opts.Add(
    'ANDROID_NDK_ROOT',
    'Path to your Android NDK installation. By default, uses ANDROID_NDK_ROOT from your defined environment variables.',
    os.environ.get("ANDROID_NDK_ROOT", None)
)

# Local dependency paths, adapt them to your setup
godot_headers_path = "godot-cpp/godot_headers/"
cpp_bindings_path = "godot-cpp/"
cpp_library = "libgodot-cpp"

# only support 64 at this time..
bits = 64

# Updates the environment with the option variables.
opts.Update(env)

# Process some arguments
if env['use_llvm']:
    env['CC'] = 'clang'
    env['CXX'] = 'clang++'

if env['platform'] == '':
    raise SystemExit("No valid target platform selected.")

# For the reference:
# - CCFLAGS are compilation flags shared between C and C++
# - CFLAGS are for C-specific compilation flags
# - CXXFLAGS are for C++-specific compilation flags
# - CPPFLAGS are for pre-processor flags
# - CPPDEFINES are for pre-processor defines
# - LINKFLAGS are for linking flags

# Check our platform specifics
if env['platform'] == "osx":
    env['target_path'] = os.path.join(env['target_path'], "osx")
    cpp_library += '.osx'
    env.Append(CCFLAGS=['-arch', 'x86_64'])
    env.Append(CXXFLAGS=['-std=c++17'])
    env.Append(LINKFLAGS=['-arch', 'x86_64'])
    if env['target'] in ('debug', 'd'):
        env.Append(CCFLAGS=['-g', '-O2'])
    else:
        env.Append(CCFLAGS=['-g', '-O3'])

elif env['platform'] in ('x11', 'linux'):
    env['target_path'] = os.path.join(env['target_path'], "x11")
    cpp_library += '.linux'
    env.Append(CCFLAGS=['-fPIC'])
    env.Append(CXXFLAGS=['-std=c++17'])
    if env['target'] == 'debug':
        env.Append(CCFLAGS=['-g3', '-Og'])
    else:
        # env.Append(CCFLAGS=['-g', '-O3'])
        # https://github.com/GodotNativeTools/godot-cpp/issues/300
        # remove -g to skip including debugging information
        env.Append(CCFLAGS=['-O3'])
        # add -s to strip unused symbols
        # env.Append(CCFLAGS=['-s'])
elif env['platform'] == "windows":
    env['target_path'] = os.path.join(env['target_path'], "win64")
    cpp_library += '.windows'
    # This makes sure to keep the session environment variables on windows,
    # that way you can run scons in a vs 2017 prompt and it will find all the required tools
    env.Append(ENV=os.environ)

    env.Append(CPPDEFINES=['WIN32', '_WIN32', '_WINDOWS', '_CRT_SECURE_NO_WARNINGS'])

    if HOST_PLATFORM == 'windows' and not env['use_mingw']:
        # MSVC
        env.Append(LINKFLAGS=['/WX'])
        if env['target'] == 'debug':
            env.Append(CPPDEFINES=['_DEBUG'])
            env.Append(CCFLAGS=['/Z7', '/Od', '/EHsc', '/D_DEBUG', '/MDd'])
            env.Append(LINKFLAGS=['-DEBUG'])
        elif env['target'] == 'release':
            env.Append(CPPDEFINES=['NDEBUG'])
            env.Append(CCFLAGS=['/O2', '/EHsc', '/DNDEBUG', '/MD'])

    elif HOST_PLATFORM == 'linux' or HOST_PLATFORM == 'osx':
        # Cross-compilation using MinGW
        env['CXX'] = 'x86_64-w64-mingw32-g++'
        env['AR'] = "x86_64-w64-mingw32-ar"
        env['RANLIB'] = "x86_64-w64-mingw32-ranlib"
        env['LINK'] = "x86_64-w64-mingw32-g++"

    if HOST_PLATFORM == 'linux' or HOST_PLATFORM == 'osx' or env['use_mingw']:
        env.Append(CCFLAGS=['-g', '-O3', '-std=c++17', '-Wwrite-strings'])
        env.Append(LINKFLAGS=[
            '--static',
            '-Wl,--no-undefined',
            '-static-libgcc',
            '-static-libstdc++',
        ])
elif env['platform'] == 'android':
    env['target_path'] = os.path.join(env['target_path'], "android")
    cpp_library += '.android'

    if 'ANDROID_NDK_ROOT' not in env:
        raise SystemExit("ANDROID_NDK_ROOT must be defined")

    # Validate API level
    api_level = int(env['android_api_level'])
    if env['android_arch'] in ['x86_64', 'arm64v8'] and api_level < 21:
        print("WARNING: 64-bit Android architectures require an API level >= 21; setting android_api_level=21")
        env['android_api_level'] = '21'
        api_level = 21

    # Setup toolchain
    toolchain = env['ANDROID_NDK_ROOT'] + "/toolchains/llvm/prebuilt/"
    if HOST_PLATFORM == "windows":
        toolchain += "windows"
        if platform.machine().endswith("64"):
            toolchain += "-x86_64"
    elif HOST_PLATFORM == "linux":
        toolchain += "linux-x86_64"
    elif HOST_PLATFORM == "osx":
        toolchain += "darwin-x86_64"
    env.PrependENVPath('PATH', os.path.join(toolchain, "bin"))

    # Get architecture info
    arch_info_table = {
        "armv7": {
            "march": "armv7-a", "target": "armv7a-linux-androideabi", "tool_path": "arm-linux-androideabi",
            "compiler_path": "armv7a-linux-androideabi", "ccflags": ['-mfpu=neon']},
        "arm64v8": {
            "march": "armv8-a", "target": "aarch64-linux-android", "tool_path": "aarch64-linux-android",
            "compiler_path": "aarch64-linux-android", "ccflags": []},
        "x86": {
            "march": "i686", "target": "i686-linux-android", "tool_path": "i686-linux-android",
            "compiler_path": "i686-linux-android", "ccflags": ['-mstackrealign']},
        "x86_64": {
            "march": "x86-64", "target": "x86_64-linux-android", "tool_path": "x86_64-linux-android",
            "compiler_path": "x86_64-linux-android", "ccflags": []}
    }
    arch_info = arch_info_table[env['android_arch']]

    # Setup tools
    env['CC'] = os.path.join(toolchain, "bin", "clang")
    env['CXX'] = os.path.join(toolchain, "bin", "clang++")
    env['AR'] = os.path.join(toolchain, "bin",  arch_info['tool_path'] + "-ar")

    env.Append(CCFLAGS=['--target=' + arch_info['target'] + env['android_api_level'],
                        '-march=' + arch_info['march'], '-fPIC'])  # , '-fPIE', '-fno-addrsig', '-Oz'])
    env.Append(CCFLAGS=arch_info['ccflags'])
    env.Append(LINKFLAGS=['--target=' + arch_info['target'] + env['android_api_level'],
                          '-march=' + arch_info['march'], '-fPIC'])  # , '-fPIE', '-fno-addrsig', '-Oz'])
    env.Append(LINKFLAGS=arch_info['ccflags'])

if env['target'] in ('debug', 'd'):
    cpp_library += '.debug'
else:
    cpp_library += '.release'

if env['platform'] != "android":
    cpp_library += '.' + str(bits)
else:
    cpp_library += '.' + env['android_arch']

cpp_library += env['LIBSUFFIX']

# make sure our binding library is properly includes
env.Append(CPPPATH=['.',
                    godot_headers_path,
                    cpp_bindings_path + 'include/',
                    cpp_bindings_path + 'include/core/',
                    cpp_bindings_path + 'include/gen/'])
env.Append(LIBPATH=[cpp_bindings_path + 'bin/'])
env.Append(LIBS=[cpp_library])

# tweak this if you want to use different folders, or more folders, to store your source code in.
env.Append(CPPPATH=['src/'])
sources = list(find_files("src", "*.cpp"))

output = os.path.join(env['target_path'], env['target_name'])
if env['platform'] != "android":
    output += '-' + str(bits)
else:
    output += '-' + env['android_arch']

library = env.SharedLibrary(output, source=sources)
env.Default(library)
env.Help(opts.GenerateHelpText(env))
